// -----------------------------------------------------------------------------------------
// JavaScript - 함수 영역(Function Scope) vs 블록 영역(Block Scope)
// -----------------------------------------------------------------------------------------

// 컴퓨터 프로그래밍에서 변수 영역은 변수가 유효성을 갖는 영역을 말합니다. 

// ==============================================================
// 전역(Global Scope)
// - 가장 간단한 변수 영역은 소스 코드 상의 모든 곳에서 사용할 수 있는 전역 변수. 
//   전역 변수는 많은 언어에서 나쁜 관습으로 취급되지만, 그런 경우에도 함수명이나 
//   클래스 명은 대부분 전역에서 접근할 수 있다. 이름공간을 사용하면 전역 영역에서
//   변수나 함수명이 충돌하는 것을 막을 수 있다.

// 전역 변수  vs  지역 변수

// #1 - 함수 내에 있는 지역 변수
var phone = 'Galaxy';

function scopeFn() {
  var phone = 'iPhone';
  console.log('지역 변수', phone); // 'iPhone'
}
scopeFn();
console.log('전역 변수', phone); // 'Galaxy'

// #2 - var 키워드를 쓸지 않을 경우, 함수 내에 선언되지 않은 변수는 지역 변수로 처리하지 않는다. 
// function subFn() {
// 상위루트로 이동해서 tablet를 찾고 없으면 전역변수 tablet를 만들기 떄문에 이 코드는 잘못됨.
//   tablet = 'Note XII'; 
//   console.log(tablet);
// }
// subFn(); 


// 네임스페이스 (객체)
var y9 = {};

// 전역을 오염시키지 않으려면, 네임스페이스 객체 활용
// 네임스페이스를 활용한 변수 대용
y9.phone = 'Galaxy Note 8';
// 네임스페이스를 활용한 함수 대용
y9.getPhone = function () {
  return this.phone;
};

var h2 = {};

h2.shoes = 'Nike';
h2.getShoes = function () {
  return this.shoes;
};

// ==============================================================
// 함수 영역(Function Scope)
// - 대부분의 프로그래밍 언어는 함수 내에서만 유효한 지역 변수를 제공한다. 
//   함수 영역을 사용하는 지역 변수는 함수가 반환되면 더 이상 사용할 수 없다.

// ==============================================================
// 블록 영역(Block Scope)
// - 알골과 그의 자손인 C, 그리고 그에 영향을 받은 많은 현대 언어들은 블록 단위 
//   지역 변수를 지원한다.
//
// - 블록 문 내부에 선언된 변수는 블록 영역에서만 접근 가능.

// ECMAScript 2015 (ES6)
// let 키워드 지원

// - if, switch, while, do~while, for, for~in문 등에 
// 사용되는 var 키워드는 '전역변수' 라고 생각하면 된다.
// 결과적으로는 '블록영역'을 지원하지 않는다.

var radio = '보는 라디오';
console.log('전역 변수:', radio); // '보는 라디오'

if (true) {
  // var radio = '듣는 라디오'; // 블록 영역 형성 X
  let radio = '듣는 라디오';    // 블록 영역 형성 O
  console.log('지역 변수:', radio); // '듣는 라디오'
}

console.log(radio); // ???