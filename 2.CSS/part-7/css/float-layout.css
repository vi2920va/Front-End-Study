/*
  ------------------------------------------------
  CSS 플로팅 레이아웃(Layout)
  ------------------------------------------------
  [속성]
  -float : 왼쪽 또는 오른쪽에 배치 할 때 유용한 속성, float 속성을 부여한 요소의 다음 요소는 float 속성을 부여한 요소가 차지하는 위치만 제외하고 나머지 공간을 채운다. (예를 들면 사진을 오른쪽에 배치 텍스트를 왼쪽할 배치할 경우에 사용.)

  -overflow : 내용이 요소의 크기를 벗어 났을 때 어떻게 처리 할 지를 정하는 속성.
  (auto : 넘쳐나는 영역을 스크롤 생성, hidden : 자식 요소의 높이만큼 보임 스크롤 생성 X)

  [사용예시]
  .is-blue{
    float: left;
    width: 200px;
  }
  .is-yellow{float: left;}
  .is-green{float: left;}

  left 의 경우 blue-yello-green 순서로 정렬.
  right 의 경우 green-yello-blue 순서로 정렬. 즉, 마크업 순서대로 정렬.

  [float을 사용할 경우 특징]
  :부모는 float만 적용된 자식만 가져서는 높이를 인식할 수 없으며, 그러므로 float를 해지 할 수 있는
  clear 속성을  가진 요소가 포함 되었을 때, 부모요소는 그때 자식 요소의 높이를 인지할 수 있게 된다. 

  [해곃법]
  clear - box-group에 가상요소를 사용해서  해결 할 수 있다, float를 해지.
  overflow : hidden 권장하지 않음.

*/
.box-group {
  /* overflow:hidden; */
  margin-top: 20px;
  border: 10px solid #e9e9e9;
}
/*  height 속성에 떄문에 자식들이 가진 높이를 overflow가 인식하지 못함. */
.box {
  margin: 0;
  margin-left: 10px;
  margin-right: 10px;
  width: 140px;
  /* height: 140px; */
}

/* 
.box.is-blue   { background: #3b4055; }
.box.is-yellow { background: #fff06b; }
.box.is-green  { background: #69ccb5; }
 */

.is-blue{
  float: left;
  width: 200px;
}
.is-yellow{float: left;}
.is-green{float: left;}

/*  clear : both(float 속성에 left,right를 모두 해지) */
.clear{
  clear:both;
}
/* 부모요소에 clearfix::after 가상요소를 만들어서 해결. 
.clearfix::after{
  content: 'after_content';
  display: block;
  clear: both;
  content 내용을 숨김.
  visibility: hidden;
  after 요소의 높이가 그대로여서 제거 
  height: 0;
}
 */
 
/* 자주 사용해서 익히도록. */
 .clearfix::after{
   content: '';
   display: block;
   clear: both;
 }
