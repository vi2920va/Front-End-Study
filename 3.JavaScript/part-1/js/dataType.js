/* 
---------------------------------------------
 JavaScript 변수 이름 작성 규칙
---------------------------------------------

 JavaScript 변수 이름은 식별자(identifier) 이다.
 식별자는 문자, 밑줄(_) 혹은 달러 기호($)로 시작해야
 하는 반면 이후는 숫자(0-9)일 수도 있다. 대소문자를
 구분하기에, 문자는 A부터 Z(대문자)와 a부터 z(소문자)까지
 모두 포함한다.

[변수 이름 작성 오류가 발생하는 예]
[1] 숫자로 시작하는 경우
[2] 밑줄(_), 달러 기호($)가 아닌,
다른 특수 문자 또는 공백이 사용된 경우

---------------------------------------------
JavaScript 데이터 유형(Types)
---------------------------------------------
최신 ECMAScript 표준은 7가지 데이터 유형을 정의합니다.

[6가지 원시 데이터(Primitive Data) 유형]
- null 
- undefined 
- number 
- string 
- boolean
- symbol (ES6+)

[null VS undefined 의 차이점]
- undefinned는 데이터 타입, 값을 두 가지를 나타낸다.
즉, 변수만 선언했지만 할당하지 않은 변수를 말한다.

- null의 타입 변수의 경우에는 명시적으로 값을 비어 있음을 나타내는데 사용한다.  
즉, 아무것도 참조하고 있지 않다는 의미로 주로 객체를 담을 변수를 초기화 할때 많이 사용한다.

-> var nullVar = null;
-> 위에 같이 하게 되면 null 타입의 변수를 생성 한다.

[그리고 객체(Object) 데이터 유형]
 - function object 
 - array object
 - object

[객체 생성 방법]
- new 생성자 함수 ()
- new 다음에 첫 글자는 대문자 사용 
- 첫글자는 소문자 사용시 error 발생 
 Uncaught ReferenceError: object is not defined - 참조 오류.

-> new Function () - {}
-> new Array () - []
-> new Object () - {}

+ 참고 : 사실 숫자,문자,블리언은 사실 객체이다.

[숫자 객체 생성 - 잘못된 사용예시]
var n = new Number(90);
-> Number {90}
-> n.valueOf() 를 사용해 숫자값을 확인 가능.
 ---------------------------------------------
 JavaScript 리터럴(Literal) - 상수값
 ---------------------------------------------
 JavaScript에서 값을 나타내기 위해 리터럴을 사용한다.
 이는 말 그대로 스크립트에 부여한 고정값으로, 변수가 아니다.
- number   리터럴
- string   리터럴
- boolean  리터럴
- array    리터럴
- function 리터럴
- object   리터럴

[부동 소수점 리터럴]
- 부호("+","-")가 달릴 수 있는 10진 정수
- 소수점(".")
- 소수 (또 다른 10진수)
- 지수

-> 3.1311
-> -.1234567
-> 3.1E+12
-> .1e-23
*/




















